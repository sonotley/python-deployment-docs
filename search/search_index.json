{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction What is this all about? Python is pretty easy to write, but when it comes to packaging, distributing and running code somewhere other than your own computer, things get a bit tricky. This is a guide to how I've chosen to tackle that problem. It's a reference for my future self and hopefully of help to other people too. Who is this for? In general, I have two target use-cases when I'm writing code, if you have similar needs perhaps you'll find this site useful. I'm providing a utility for users to use on their workstations - generally Windows PCs I'm proving software to be run as a service on a server, often Windows but sometimes Linux These two use-cases share some similarities: I can't guarantee the version of Python (or even the existence of Python) on the target system I don't want the installer or user to need to know any Python or to do lots of setup work, it needs to just install and work I don't want the deployed code to be scattered around non-obvious places, ideally everything should be in one directory so it can be uninstalled simply by deleting that directory In the case of deployment to a server there is an important addition to the third point above: The installed software must not be dependent on the continued existence of the user account by which it was installed. Who is this not for? Well, I like to think anyone with an interest in Python could get something from these pages, but there are a few area I'm not planning on addressing simply because they aren't options I generally use. They aren't bad options, they just aren't part of the environment I'm currently working in. They are: Deploying software as a Docker container Deploying to 'serverless' cloud services such as Google App Engine, AWS Lambda, Heroku I also don't really cover the online CI/CD tools such as those provided Github and Gitlab. I'd like to explore these, but they aren't in my current workflow. My dev environment","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#what-is-this-all-about","text":"Python is pretty easy to write, but when it comes to packaging, distributing and running code somewhere other than your own computer, things get a bit tricky. This is a guide to how I've chosen to tackle that problem. It's a reference for my future self and hopefully of help to other people too.","title":"What is this all about?"},{"location":"#who-is-this-for","text":"In general, I have two target use-cases when I'm writing code, if you have similar needs perhaps you'll find this site useful. I'm providing a utility for users to use on their workstations - generally Windows PCs I'm proving software to be run as a service on a server, often Windows but sometimes Linux These two use-cases share some similarities: I can't guarantee the version of Python (or even the existence of Python) on the target system I don't want the installer or user to need to know any Python or to do lots of setup work, it needs to just install and work I don't want the deployed code to be scattered around non-obvious places, ideally everything should be in one directory so it can be uninstalled simply by deleting that directory In the case of deployment to a server there is an important addition to the third point above: The installed software must not be dependent on the continued existence of the user account by which it was installed.","title":"Who is this for?"},{"location":"#who-is-this-not-for","text":"Well, I like to think anyone with an interest in Python could get something from these pages, but there are a few area I'm not planning on addressing simply because they aren't options I generally use. They aren't bad options, they just aren't part of the environment I'm currently working in. They are: Deploying software as a Docker container Deploying to 'serverless' cloud services such as Google App Engine, AWS Lambda, Heroku I also don't really cover the online CI/CD tools such as those provided Github and Gitlab. I'd like to explore these, but they aren't in my current workflow. My dev environment","title":"Who is this not for?"},{"location":"dev/","text":"Development environment The basics My development environment consists of: Pycharm with Poetry plugin Poetry Git Pycharm is largely just a personal preference, you can follow this workflow with any IDE, or none. Similarly Git is central to how I share, backup and manage the history of my source code, but has no place in my deployment workflow other than as a way to get the source to the place it will be packaged. Poetry however, is pretty important. What is Poetry? I've never heard of it. Poetry is a fairly young project which provides an all-in-one solution to packaging and dependency management. I use Poetry because it makes it very easy to package my code up into something that someone else can pip install (or indeed poetry install but as you'll see, I don't want to rely on the target system having Poetry installed).","title":"Development environment"},{"location":"dev/#development-environment","text":"","title":"Development environment"},{"location":"dev/#the-basics","text":"My development environment consists of: Pycharm with Poetry plugin Poetry Git Pycharm is largely just a personal preference, you can follow this workflow with any IDE, or none. Similarly Git is central to how I share, backup and manage the history of my source code, but has no place in my deployment workflow other than as a way to get the source to the place it will be packaged. Poetry however, is pretty important.","title":"The basics"},{"location":"dev/#what-is-poetry-ive-never-heard-of-it","text":"Poetry is a fairly young project which provides an all-in-one solution to packaging and dependency management. I use Poetry because it makes it very easy to package my code up into something that someone else can pip install (or indeed poetry install but as you'll see, I don't want to rely on the target system having Poetry installed).","title":"What is Poetry? I've never heard of it."}]}